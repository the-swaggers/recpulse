from typing import Any, Callable, Literal

import numpy as np
from pydantic import BaseModel, StrictInt, StrictStr, ValidationError, model_validator

import classes.activations as activations

PRECISIONS = float | np.float16 | np.float32 | np.float64
TENSOR_TYPE = np.ndarray[PRECISIONS, Any]

ACTIVATION_FUNCTIONS = Literal[
    "linear",
    "sigmoid",
    "softmax",
    "relu",
    "leaky_relu",
    "parametric_relu",
    "binary_step",
    "tanh",
    "arctan",
    "elu",
    "swish",
]

STR2ACTIVATION = {
    "linear": activations.linear,
    "sigmoid": activations.sigmoid,
    "softmax": activations.softmax,
    "relu": activations.relu,
    "leaky_relu": activations.leaky_relu,
    "parametric_relu": activations.parametric_relu,
    "binary_step": activations.binary_step,
    "tanh": activations.tanh,
    "arctan": activations.arctan,
    "elu": activations.elu,
    "swish": activations.swish,
}


class Dense(BaseModel):
    """Dense layer class.

    Layer that connects all inputs to all outputs and adds biases.
    """

    output_size: StrictInt
    _input_size: StrictInt | None = None
    name: StrictStr | None = None
    _weights: np.ndarray | None = None
    _activation: Callable[[Any], TENSOR_TYPE] | None = None

    @model_validator(mode="after")  # type: ignore
    def validator(self) -> None:
        """Validate parameters of the layer."""

        if self.output_size <= 0:
            raise ValidationError("Output size must be greater than 0.")

        if self._input_size is not None:
            if self._input_size <= 0:
                raise ValidationError("Input size must be greater than 0.")

    def __init__(
        self,
        output_size: StrictInt,
        input_size: StrictInt | None = None,
        activation: ACTIVATION_FUNCTIONS = "linear",
        name: StrictStr | None = None,
    ):
        super().__init__(
            output_size=output_size,
            name=name,
        )

        self._activation = STR2ACTIVATION[activation]  # type: ignore
        if input_size is not None:
            self.input_size = input_size
            self.initialize_weights()

    @property
    def input_size(self) -> int | None:
        """Python getter."""
        return self._input_size

    @input_size.setter
    def input_size(self, value: int | tuple) -> None:
        """Python setter."""
        if isinstance(value, tuple):
            value, _ = value
        if not isinstance(value, int):
            raise ValidationError(
                "Input size must be an integer or an integer" " in format of tuple of shape (1, )."
            )
        if value <= 0:
            raise ValueError("Input size must be positive.")
        self._input_size = value

    def initialize_weights(
        self,
        input_size: int | None = None,
        mean: float | None = None,
        standard_deviation: float | None = None,
    ) -> None:
        """Weights initializer.

        Creates a numpy array of shape (input_size + 1, self.output_size) with integers
        randomly generated by normal distribution.

        input_size + 1 is used instead of input_size to include biases for this layer.

        Inputs:
            input_size (int): size of the previous neuron layer.
            mean (float): mean of normal distribution for weights initialization
            standard_deviation (float): standard deviation of normal distribution
                 for weights initialization
        """

        if self._input_size is None:
            if input_size is None:
                raise ValueError(
                    "input_size is not specified neither in the function execution, "
                    "nor in the class's instance"
                )
            self._input_size = input_size

        if standard_deviation is None:
            standard_deviation = 1
        elif standard_deviation <= 0:
            raise ValueError("standard deviation must be greater than zero")

        if mean is None:
            mean = 0

        self._weights = np.random.normal(
            mean, standard_deviation, size=(self._input_size + 1, self.output_size)  # type: ignore
        )

    def propagate(self, inputs: np.ndarray) -> np.ndarray:
        """Propagates input tensor.

        Inputs:
            inputs (np.array): an array of shape (self.input_size, )

        Returns:
            np.array: an array of shape (self.output_size, )
        """

        if self._weights is None:
            raise ValueError("Weights aren't initialized!")
        if self._activation is None:
            raise ValueError("Activation function isn't initialized!")

        # add 1 so that the bias doesn't need any additional code apart from matmul
        modified_input = np.append(inputs, 1, axis=0)

        # get new layer
        propagated = np.matmul(modified_input, self._weights)

        return self._activation(propagated)
