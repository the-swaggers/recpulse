from pydantic import BaseModel, model_validator, StrictInt, StrictStr, ValidationError
import numpy as np


ACTIVATION_FUNCTIONS = Literal["linear", "relu", "sigmoid", "softmax"]


class Dense(BaseModel):
    """Dense layer class.

    Layer that connects all inputs to all outputs and adds biases.
    """

    output_size: StrictInt
    input_size: StrictInt | None = None
    activation: ACTIVATION_FUNCTIONS = "linear"
    name: StrictStr | None = None
    _weights: list[float] | None = None

    @model_validator(mode="after")
    def validator(self) -> None:
        """Validate parameters of the layer."""

        if size <= 0:
            raise ValidationError("Output size must be greater than 0.")

    def initialize_weights(
        self,
        input_size: int | None = None,
        mean: float | None = None,
        standard_deviation: float | None = None,
    ) -> None:
        """Weights initializer.

        Creates a numpy array of shape (input_size + 1, self.output_size) with integers
        randomly generated by normal distribution.

        input_size + 1 is used instead of input_size to include biases for this layer.

        Inputs:
            input_size (int): size of the previous neuron layer.
            mean (float): mean of normal distribution for weights initialization
            standard_deviation (float): standard deviation of normal distribution for weights initialization
        """

        if self.input_size is None:
            assert (
                input_size is not None
            ), "input_size is not specified neither in the function execution, nor in the class's instance"
            self.input_size = input_size

        if standard_deviation is None:
            standard_deviation = 1
        elif standard_deviation <= 0:
            raise ValueError("standard deviation must be greater than zero")

        if mean is None:
            mean = 0

        self._weights = np.random.normal(
            mean, standard_deviation, size=(input_size + 1, self.output_size)
        )
